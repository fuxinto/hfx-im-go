// Code generated by Kitex v0.2.0. DO NOT EDIT.

package routerpc

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
	"route/kitex_gen/routeRpc"
	"route/kitex_gen/rpc"
)

func serviceInfo() *kitex.ServiceInfo {
	return routeRpcServiceInfo
}

var routeRpcServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "routeRpc"
	handlerType := (*routeRpc.RouteRpc)(nil)
	methods := map[string]kitex.MethodInfo{
		"login":       kitex.NewMethodInfo(loginHandler, newLoginArgs, newLoginResult, false),
		"GatePushMsg": kitex.NewMethodInfo(gatePushMsgHandler, newGatePushMsgArgs, newGatePushMsgResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "routeRpc",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.0",
		Extra:           extra,
	}
	return svcInfo
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(routeRpc.LoginReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(routeRpc.RouteRpc).Login(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *LoginArgs:
		success, err := handler.(routeRpc.RouteRpc).Login(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*LoginResult)
		realResult.Success = success
	}
	return nil
}
func newLoginArgs() interface{} {
	return &LoginArgs{}
}

func newLoginResult() interface{} {
	return &LoginResult{}
}

type LoginArgs struct {
	Req *routeRpc.LoginReq
}

func (p *LoginArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in LoginArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *LoginArgs) Unmarshal(in []byte) error {
	msg := new(routeRpc.LoginReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var LoginArgs_Req_DEFAULT *routeRpc.LoginReq

func (p *LoginArgs) GetReq() *routeRpc.LoginReq {
	if !p.IsSetReq() {
		return LoginArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *LoginArgs) IsSetReq() bool {
	return p.Req != nil
}

type LoginResult struct {
	Success *routeRpc.LoginReply
}

var LoginResult_Success_DEFAULT *routeRpc.LoginReply

func (p *LoginResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in LoginResult")
	}
	return proto.Marshal(p.Success)
}

func (p *LoginResult) Unmarshal(in []byte) error {
	msg := new(routeRpc.LoginReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *LoginResult) GetSuccess() *routeRpc.LoginReply {
	if !p.IsSetSuccess() {
		return LoginResult_Success_DEFAULT
	}
	return p.Success
}

func (p *LoginResult) SetSuccess(x interface{}) {
	p.Success = x.(*routeRpc.LoginReply)
}

func (p *LoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func gatePushMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(rpc.MessagePushReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(routeRpc.RouteRpc).GatePushMsg(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GatePushMsgArgs:
		success, err := handler.(routeRpc.RouteRpc).GatePushMsg(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GatePushMsgResult)
		realResult.Success = success
	}
	return nil
}
func newGatePushMsgArgs() interface{} {
	return &GatePushMsgArgs{}
}

func newGatePushMsgResult() interface{} {
	return &GatePushMsgResult{}
}

type GatePushMsgArgs struct {
	Req *rpc.MessagePushReq
}

func (p *GatePushMsgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GatePushMsgArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GatePushMsgArgs) Unmarshal(in []byte) error {
	msg := new(rpc.MessagePushReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GatePushMsgArgs_Req_DEFAULT *rpc.MessagePushReq

func (p *GatePushMsgArgs) GetReq() *rpc.MessagePushReq {
	if !p.IsSetReq() {
		return GatePushMsgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GatePushMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

type GatePushMsgResult struct {
	Success *rpc.MessagePushReply
}

var GatePushMsgResult_Success_DEFAULT *rpc.MessagePushReply

func (p *GatePushMsgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GatePushMsgResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GatePushMsgResult) Unmarshal(in []byte) error {
	msg := new(rpc.MessagePushReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GatePushMsgResult) GetSuccess() *rpc.MessagePushReply {
	if !p.IsSetSuccess() {
		return GatePushMsgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GatePushMsgResult) SetSuccess(x interface{}) {
	p.Success = x.(*rpc.MessagePushReply)
}

func (p *GatePushMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Login(ctx context.Context, Req *routeRpc.LoginReq) (r *routeRpc.LoginReply, err error) {
	var _args LoginArgs
	_args.Req = Req
	var _result LoginResult
	if err = p.c.Call(ctx, "login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GatePushMsg(ctx context.Context, Req *rpc.MessagePushReq) (r *rpc.MessagePushReply, err error) {
	var _args GatePushMsgArgs
	_args.Req = Req
	var _result GatePushMsgResult
	if err = p.c.Call(ctx, "GatePushMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
