// Code generated by Kitex v0.2.0. DO NOT EDIT.

package gatek

import (
	"context"
	"fmt"
	"gate/kitex_gen/rpc"
	"github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	"github.com/cloudwego/kitex/pkg/streaming"
	"google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return gateServiceInfo
}

var gateServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "gate"
	handlerType := (*Gate)(nil)
	methods := map[string]kitex.MethodInfo{
		"RoutePushMsg": kitex.NewMethodInfo(routePushMsgHandler, newRoutePushMsgArgs, newRoutePushMsgResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "gatek",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.2.0",
		Extra:           extra,
	}
	return svcInfo
}

func routePushMsgHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(rpc.MessagePushReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(Gate).RoutePushMsg(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *RoutePushMsgArgs:
		success, err := handler.(Gate).RoutePushMsg(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RoutePushMsgResult)
		realResult.Success = success
	}
	return nil
}
func newRoutePushMsgArgs() interface{} {
	return &RoutePushMsgArgs{}
}

func newRoutePushMsgResult() interface{} {
	return &RoutePushMsgResult{}
}

type RoutePushMsgArgs struct {
	Req *rpc.MessagePushReq
}

func (p *RoutePushMsgArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RoutePushMsgArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RoutePushMsgArgs) Unmarshal(in []byte) error {
	msg := new(rpc.MessagePushReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RoutePushMsgArgs_Req_DEFAULT *rpc.MessagePushReq

func (p *RoutePushMsgArgs) GetReq() *rpc.MessagePushReq {
	if !p.IsSetReq() {
		return RoutePushMsgArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RoutePushMsgArgs) IsSetReq() bool {
	return p.Req != nil
}

type RoutePushMsgResult struct {
	Success *rpc.MessagePushReply
}

var RoutePushMsgResult_Success_DEFAULT *rpc.MessagePushReply

func (p *RoutePushMsgResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RoutePushMsgResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RoutePushMsgResult) Unmarshal(in []byte) error {
	msg := new(rpc.MessagePushReply)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RoutePushMsgResult) GetSuccess() *rpc.MessagePushReply {
	if !p.IsSetSuccess() {
		return RoutePushMsgResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RoutePushMsgResult) SetSuccess(x interface{}) {
	p.Success = x.(*rpc.MessagePushReply)
}

func (p *RoutePushMsgResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RoutePushMsg(ctx context.Context, Req *rpc.MessagePushReq) (r *rpc.MessagePushReply, err error) {
	var _args RoutePushMsgArgs
	_args.Req = Req
	var _result RoutePushMsgResult
	if err = p.c.Call(ctx, "RoutePushMsg", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
